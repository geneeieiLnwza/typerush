package com.lab;

import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;
import javafx.util.Duration;

import java.io.*;
import java.util.*;

public class GameController {

    @FXML private Label sampleText;       // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå
    @FXML private Label timerLabel;       // ‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
    @FXML private Label resultLabel;      // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    @FXML private TextField typingField;  // ‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå
    @FXML private Button startButton;     // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°/‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó


    private static final String BASE_CSV = "text.csv";  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå base

    
    public static final String USER_CSV = "text_user.csv";

    private String currentText;       // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå
    private int timeLeft = 60;        // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    private Timeline timeline;        // ‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ö‡∏ö real-time
    private boolean testStarted = false; // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    private long startTime;           // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå
    private int correctWords = 0;     // ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    private int totalTypedWords = 0;  // ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    private int mistakeCount = 0;     // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ú‡∏¥‡∏î
    private final Random random = new Random(); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            // ‡πÉ‡∏™‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏≤‡∏™
        private int lastWpm = 0;
        private int lastScore = 0;



    // ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î Start (‡∏´‡∏£‡∏∑‡∏≠ Restart) ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
    @FXML
    private void startTest() {


        if (!testStarted) {
            testStarted = true;
            correctWords = 0;
            totalTypedWords = 0;
            mistakeCount = 0;
            startTime = System.currentTimeMillis();  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°
            nextSentence();                          // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡πÅ‡∏£‡∏Å
            typingField.setDisable(false);
            typingField.setText("");
            typingField.requestFocus();              // ‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå
            timeLeft = 60;
            timerLabel.setText("Time: " + timeLeft + "s");
            resultLabel.setText("");

            typingField.setOnKeyReleased(e -> checkCompletion()); // ‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏õ‡∏∏‡πà‡∏°

            if (timeline != null) {
                timeline.stop();
            }

            // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ ‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏µ‡∏•‡∏∞ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            timeline = new Timeline(new KeyFrame(Duration.seconds(1), e -> {
                timeLeft = 60 - (int) ((System.currentTimeMillis() - startTime) / 1000);

                Platform.runLater(() -> timerLabel.setText("Time: " + timeLeft + "s"));
                if (timeLeft <= 0) {
                    endTest(); // ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤
                }
            }));
            timeline.setCycleCount(Timeline.INDEFINITE);
            timeline.play();
            startButton.setText("Restart");
        } else {
            restartTest();
        }
    }

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏Å‡∏î Start ‡πÉ‡∏´‡∏°‡πà = ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏Å‡∏°
    private void restartTest() {
        testStarted = false;
        if (timeline != null) timeline.stop();
        startTest(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏´‡∏°‡πà
    }

    // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
    private void nextSentence() {
        List<String> texts = new ArrayList<>();
        loadFromCsv(BASE_CSV, texts);  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å resources
        loadFromCsv(USER_CSV, texts);  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å text_user.csv (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ)
    
        if (texts.isEmpty()) {
            sampleText.setText("No text available.");
            return;
        }
    
        currentText = texts.get(new Random().nextInt(texts.size()));
        sampleText.setText(currentText);
        typingField.setText("");
    
        System.out.println("üìÑ Loaded texts:");
        for (String text : texts) {
            System.out.println("üëâ " + text);
        }
    }
    

    private void loadFromCsv(String path, List<String> list) {
        try {
            InputStream input;
            if (path.equals(BASE_CSV)) {
                input = getClass().getResourceAsStream("/" + path); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å resources
                if (input == null) {
                    System.out.println("üö´ BASE_CSV not found in resources: " + path);
                    return;
                }
            } else {
                input = new FileInputStream(path); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å text_user.csv
            }
    
            BufferedReader reader = new BufferedReader(new InputStreamReader(input));
            String line;
            while ((line = reader.readLine()) != null) {
                list.add(line.trim());
            }
            reader.close();
        } catch (IOException e) {
            System.out.println("‚ö†Ô∏è Error reading file: " + path);
            e.printStackTrace();
        }
    }
    
    
    
    
    
    
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    private void checkCompletion() {
        String typedText = typingField.getText().trim();

        if (!currentText.startsWith(typedText)) {
            mistakeCount++; // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ú‡∏¥‡∏î
        }

        if (typedText.equals(currentText)) {
            String[] words = typedText.split("\\s+"); // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥
            correctWords += words.length;
            totalTypedWords += words.length;
            nextSentence(); // ‡πÑ‡∏õ‡∏Ñ‡∏≥‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        }
    }

    // ‚úÖ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‚Üí ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    private void endTest() {
        if (timeline != null) timeline.stop();
        typingField.setDisable(true);

        long elapsedTime = (System.currentTimeMillis() - startTime) / 1000;
        if (elapsedTime == 0) elapsedTime = 1;

        int wpm = (int) ((correctWords * 60) / elapsedTime);
        int total = totalTypedWords == 0 ? correctWords : totalTypedWords;
        double baseScore = ((double) correctWords / total) * 100;
        double penalty = Math.min(mistakeCount * 5, 50);
        int finalScore = (int) Math.max(0, baseScore - penalty);

        lastWpm = wpm;
        lastScore = finalScore;

        Platform.runLater(() -> {
            resultLabel.setText("Results: " + wpm + " WPM | Score: " + finalScore + "%");
            sampleText.setText("Test Finished!");
        });
    }

    // ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î ENTER ‚Üí ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    @FXML
    private void initialize() {
        typingField.setOnKeyPressed(event -> {
            if (event.getCode().toString().equals("ENTER")) {
                nextSentence();
            }
        });
    }

    // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ ManageTextsController
    @FXML
    private void openManageTexts(ActionEvent event) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/manage_texts.fxml"));
            Parent root = loader.load();
            Stage stage = new Stage();
            stage.setScene(new Scene(root));
            stage.setTitle("Manage Sample Texts");
            stage.setResizable(false);
            stage.show();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    @FXML
    private void showResults() {
    resultLabel.setText("Last Results: " + lastWpm + " WPM | Score: " + lastScore + "%");
}

@FXML
private void switchToManageTexts(ActionEvent event) {
    try {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/manage_texts.fxml"));
        Parent root = loader.load();

        // ‚úÖ ‡∏î‡∏∂‡∏á stage ‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏î
        Stage currentStage = (Stage) ((Button) event.getSource()).getScene().getWindow();

        currentStage.setScene(new Scene(root));             // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô scene ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏°
        currentStage.setTitle("Manage Sample Texts");       // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà (optional)
        currentStage.show();                                // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    } catch (IOException e) {
        e.printStackTrace();
    }
}
private String getResourcePath(String filename) {
    return Objects.requireNonNull(getClass().getResource("/" + filename)).getPath();
}


    }
